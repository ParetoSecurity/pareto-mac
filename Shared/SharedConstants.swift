//
//  SharedConstants.swift
//  SwiftAuthorizationSample
//
//  Created by Josh Kaplan on 2021-10-23
//

import Foundation
import SecureXPC
import Blessed

/// Encapsulates a set of constants used throughout the app and helper tool.
struct SharedConstants {
    
    enum SharedConstantsError: Error {
        /// The helper tool's launchd property list's value for `MachServices` array has no elements.
        case missingMachServiceName
        /// The app's info property list is missing its `SMPrivilegedExecutables` key or has no entries in the correct format.
        case missingSMPrivilegedExecutables
    }
    
    /// Authorization right used to force user to authenticate as admin before performing an action.
    static let exampleRight = AuthorizationRight(name: "com.example.SwiftAuthorizationSample.secure-action")
    /// XPC route to run an allowed command as root.
    static let allowedCommandRoute = XPCRoute.named("process")
                                             .withMessageType(AllowedCommandMessage.self)
                                             .withReplyType(AllowedCommandReply.self)
    /// XPC route to uninstall the helper tool.
    static let uninstallRoute = XPCRoute.named("uninstall")
    /// XPC route to update the helper tool.
    static let updateRoute = XPCRoute.named("update")
                                     .withMessageType(URL.self)
    
    /// The label of the helper tool. This is required by SMJobBless to match its filename.
    let helperToolLabel: String
    /// The name of the Mach Service registered by the helper tool. If there are multiple registered Mach Services, this is set to the name of the first one.
    /// If using the build script that's part of this project, then this will have the same value as `helperToolLabel`, but no such requirement exists and this
    /// code makes no such assumption.
    let machServiceName: String
    /// Location of the helper tool's launchd property list generated by the system as part of SMJobBless.
    ///
    /// In practice this is where SMJobBless will place the launchd property list, but this behavior is not officially documented.
    let blessedPropertyListLocation: URL
    /// Location of the helper tool if it has been blessed via SMJobBless.
    ///
    /// In practice this is where SMJobBless will install the helper tool, but this behavior is not officially documented.
    let blessedLocation: URL
    /// Location of the helper tool within the app bundle.
    ///
    /// This is only valid when accessed from the app, if accessed from the helper tool the value will be `nil`.
    let bundledLocation: URL?
    
    /// The process initializing an instance of constants.
    enum CallingProcess {
        case app
        case helperTool
    }
    
    /// Initializes a set of constants used throughout the app and helper tool.
    ///
    /// - Parameter caller: Which process is initializing this instance.
    init(caller: CallingProcess) throws {
        // The launchd property list of either our own binary (if running as the helper tool) or the helper tool
        // bundled within this app (if running as the app)
        let launchdPropertyList: HelperToolLaunchdPropertyList
        switch caller {
            case .app:
                if let helperToolLabel = (Bundle.main.infoDictionary?["SMPrivilegedExecutables"]
                                          as? [String : Any])?.first?.key {
                    self.helperToolLabel = helperToolLabel
                    let relativeBundledLocation = "Contents/Library/LaunchServices/\(helperToolLabel)"
                    let bundledLocation = URL(fileURLWithPath: relativeBundledLocation,
                                              relativeTo: Bundle.main.bundleURL).absoluteURL
                    self.bundledLocation = bundledLocation
                    launchdPropertyList = try HelperToolLaunchdPropertyList(from: bundledLocation)
                } else {
                    throw SharedConstantsError.missingSMPrivilegedExecutables
                }
            case .helperTool:
                launchdPropertyList = try HelperToolLaunchdPropertyList.main()
                self.helperToolLabel = launchdPropertyList.label
                self.bundledLocation = nil
        }
        
        self.blessedPropertyListLocation = URL(fileURLWithPath: "/Library/LaunchDaemons/\(helperToolLabel).plist")
        self.blessedLocation = URL(fileURLWithPath: "/Library/PrivilegedHelperTools/\(helperToolLabel)")
        
        // Determine the name of the mach service using the helper tool's launchd property list.
        // Important: If the Mach Service name has been changed, until that new version of the helper tool is
        // installed via SMJobBless this will not result in the correct name being found.
        if let machServiceName = launchdPropertyList.machServices.first?.key {
            self.machServiceName = machServiceName
        } else {
            throw SharedConstantsError.missingMachServiceName
        }
    }
}
