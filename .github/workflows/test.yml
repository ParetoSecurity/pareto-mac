name: Test and Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: macos-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-lint
      cancel-in-progress: true
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16"
      - name: Repository checkout
        uses: actions/checkout@v4
      - name: Cache mint modules
        uses: actions/cache@v3
        env:
          cache-name: cache-mint-v2
        with:
          path: ~/.mint
          key: ${{ runner.os }}-mint-${{ env.cache-name }}-${{ hashFiles('Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-${{ env.cache-name }}-
      - name: Install mint and packages
        run: brew install mint && mint bootstrap
      - name: Lint
        run: make lint
  
  build:
    name: Build and Archive Native
    needs: lint
    runs-on: macos-latest
    timeout-minutes: 15
    permissions:
      issues: write
      pull-requests: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-build
      cancel-in-progress: true
    steps:
      - uses: mshick/add-pr-comment@v1
        with:
          message: |
            You can find the built app under the Artifacts at https://github.com/ParetoSecurity/pareto-mac/actions/runs/${{ github.run_id }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: "github-actions[bot]"
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16"
      - name: "Import Certificate: Development"
        env:
          DEVELOPMENT_CERTIFICATE_DATA: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          DEVELOPMENT_CERTIFICATE_PASSPHRASE: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPMENT_CERTIFICATE_DATA" | base64 --decode >$CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH || true
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$DEVELOPMENT_CERTIFICATE_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: "Import Certificate: Developer ID Application"
        env:
          APPLICATION_CERTIFICATE_DATA: ${{ secrets.APPLICATION_CERTIFICATE_DATA }}
          APPLICATION_CERTIFICATE_PASSPHRASE: ${{ secrets.APPLICATION_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLICATION_CERTIFICATE_DATA" | base64 --decode >$CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH || true
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLICATION_CERTIFICATE_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Repository checkout
        uses: actions/checkout@v4
      - name: Cache mint modules
        uses: actions/cache@v3
        env:
          cache-name: cache-mint-v2
        with:
          path: ~/.mint
          key: ${{ runner.os }}-mint-${{ env.cache-name }}-${{ hashFiles('Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-${{ env.cache-name }}-
      - name: Install mint and packages
        run: brew install mint && mint bootstrap
      - name: Cache SPM modules
        uses: actions/cache@v3
        env:
          cache-name: cache-spm-v2
        with:
          path: SourcePackages
          key: ${{ runner.os }}-spm-${{ env.cache-name }}-${{ hashFiles('Pareto Security.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ env.cache-name }}-
      - name: Cache DerivedData
        uses: actions/cache@v3
        env:
          cache-name: build-derived-data-v2
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
      - name: Build
        run: set -o pipefail && make archive-debug 2>&1 | mint run xcbeautify
        # run: make archive-debug
      - name: Compress app for storage
        run: ditto -V -c -k --keepParent Export/Pareto\ Security.app ParetoSecurity.app.zip
      - name: Upload App to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ParetoSecurity.app
          path: ParetoSecurity.app.zip
      - name: Publish hashes
        run: |  
          echo "## Debug build" >> $GITHUB_STEP_SUMMARY
          openssl md5 Export/Pareto\ Security.app/Contents/MacOS/Pareto\ Security >> $GITHUB_STEP_SUMMARY
          openssl sha1 Export/Pareto\ Security.app/Contents/MacOS/Pareto\ Security >> $GITHUB_STEP_SUMMARY
          openssl sha256 Export/Pareto\ Security.app/Contents/MacOS/Pareto\ Security >> $GITHUB_STEP_SUMMARY

  build-setapp:
    name: Build and Archive SetApp
    runs-on: macos-latest
    timeout-minutes: 15
    needs: lint
    permissions:
      issues: write
      pull-requests: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-build-setapp
      cancel-in-progress: true
    steps:
      - uses: mshick/add-pr-comment@v1
        with:
          message: |
            You can find the built app under the Artifacts at https://github.com/ParetoSecurity/pareto-mac/actions/runs/${{ github.run_id }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: "github-actions[bot]"
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16"
      - name: "Import Certificate: Development"
        env:
          DEVELOPMENT_CERTIFICATE_DATA: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          DEVELOPMENT_CERTIFICATE_PASSPHRASE: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPMENT_CERTIFICATE_DATA" | base64 --decode >$CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH || true
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$DEVELOPMENT_CERTIFICATE_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: "Import Certificate: Developer ID Application"
        env:
          APPLICATION_CERTIFICATE_DATA: ${{ secrets.APPLICATION_CERTIFICATE_DATA }}
          APPLICATION_CERTIFICATE_PASSPHRASE: ${{ secrets.APPLICATION_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLICATION_CERTIFICATE_DATA" | base64 --decode >$CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH || true
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLICATION_CERTIFICATE_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Repository checkout
        uses: actions/checkout@v4
      - name: Cache mint modules
        uses: actions/cache@v3
        env:
          cache-name: cache-mint-v2
        with:
          path: ~/.mint
          key: ${{ runner.os }}-mint-${{ env.cache-name }}-${{ hashFiles('Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-${{ env.cache-name }}-
      - name: Install mint and packages
        run: brew install mint && mint bootstrap
      - name: Cache SPM modules
        uses: actions/cache@v3
        env:
          cache-name: cache-spm-v2
        with:
          path: SourcePackages
          key: ${{ runner.os }}-spm-${{ env.cache-name }}-${{ hashFiles('Pareto Security.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ env.cache-name }}-
      - name: Cache DerivedData
        uses: actions/cache@v3
        env:
          cache-name: setapp-build-derived-data-v2
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
              
      - name: Build
        run: set -o pipefail && make archive-debug-setapp 2>&1 | mint run xcbeautify

      - name: Compress app for storage
        run: ditto -V -c -k --keepParent SetAppExport/Pareto\ Security.app ParetoSecuritySetApp.app.zip

      - name: Upload App to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ParetoSecuritySetApp.app
          path: ParetoSecuritySetApp.app.zip

      - name: Publish hashes
        run: |  
          echo "## Setapp" >> $GITHUB_STEP_SUMMARY
          openssl md5 SetAppExport/Pareto\ Security.app/Contents/MacOS/Pareto\ Security\ SetApp >> $GITHUB_STEP_SUMMARY
          openssl sha1 SetAppExport/Pareto\ Security.app/Contents/MacOS/Pareto\ Security\ SetApp >> $GITHUB_STEP_SUMMARY
          openssl sha256 SetAppExport/Pareto\ Security.app/Contents/MacOS/Pareto\ Security\ SetApp >> $GITHUB_STEP_SUMMARY
